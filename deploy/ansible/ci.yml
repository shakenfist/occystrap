- hosts: localhost
  gather_facts: yes
  connection: ssh
  vars:
    identifier: unknown
    source_path: "/home/jenkins/src/occystrap/"
    base_image: "debian:11"
    base_image_user: "debian"

  tasks:
    - name: Create the namespace
      shell: sf-client namespace create "{{identifier}}"

    - name: Create a network for outgoing traffic
      sf_network:
        netblock: "10.0.0.0/24"
        name: "public"
        namespace: "{{identifier}}"
      register: publicnetwork

    - name: Log network details
      debug:
        msg:
          - "Public network is {{publicnetwork['meta']['uuid']}}"

    - name: Setup cloud-config to add a password to CI nodes for debugging
      set_fact:
        userdata_decoded: |
          #cloud-config
          ssh_pwauth: True
          chpasswd: { expire: False }

          users:
            - name: ciuser
              lock-passwd: False
              sudo: [ "ALL=(ALL) NOPASSWD:ALL" ]
              shell: /bin/bash
              # This password hash is generated with mkpasswd --method=SHA-512 --rounds=4096
              passwd: "$6$rounds=4096$jBqTFFRr$75ehRH5AtiUxWMlFf1Ji.szp1NCjut2WiiD./QHsfWbCfKKjX1bs6MtBcWedlqKwcBKEPP/oLinTbH6gwcwUA1"

    - name: Encode user data
      set_fact:
        userdata_encoded: "{{ userdata_decoded | b64encode }}"

    - name: Create a primary instance
      sf_instance:
        name: "primary"
        cpu: 4
        ram: 4096
        disks:
          - "100@{{base_image}}"
        networkspecs:
          - network_uuid="{{publicnetwork['meta']['uuid']}}",float=True
        ssh_key: "{{ lookup('file', '/home/jenkins/id_ci.pub') }}"
        namespace: "{{identifier}}"
        user_data: "{{userdata_encoded}}"
        state: present
      register: primary

    - name: Add primary node to ansible
      add_host:
        hostname: primary
        egress_ip: "{{primary['meta']['network_interfaces'][0]['ipv4']}}"
        ansible_host: "{{primary['meta']['network_interfaces'][0]['floating']}}"
        ansible_ssh_host: "{{primary['meta']['network_interfaces'][0]['floating']}}"
        ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null"
        ansible_ssh_user: "{{base_image_user}}"
        ansible_ssh_private_key_file: "/home/jenkins/id_ci"
        groups: occystrapall

    - name: Log instance details
      debug:
        msg:
          - "Primary: is {{primary['meta']['uuid']}} at {{primary['meta']['network_interfaces'][0]['ipv4']}}, {{primary['meta']['network_interfaces'][0]['floating']}}"

    - name: Ensure we have somewhere to write the build details to
      file:
        path: "{{ lookup('env', 'WORKSPACE') }}/{{ lookup('env', 'BUILD_TAG') }}"
        state: directory
        mode: "0755"

    - name: Write details of instances to workspace
      copy:
        content: |
          {% for svr in groups.occystrapall %}
          export {{ svr | replace('-', '_') }}={{hostvars[svr]['ansible_ssh_host']}}
          {% endfor %}

          export identifier={{identifier}}
          export source_path={{source_path}}
          export nodes="{{ groups.occystrapall | join(' ') | replace('-', '_') }}"
        dest: "{{ lookup('env', 'WORKSPACE') }}/{{ lookup('env', 'BUILD_TAG') }}/ci-environment.sh"
        owner: jenkins
        group: jenkins
        mode: u=r,g=r,o=r

    - name: Log environment details path
      debug:
        msg: "Environment details written to {{ lookup('env', 'WORKSPACE') }}/{{ lookup('env', 'BUILD_TAG') }}/ci-environment.sh"

    - name: Build Occystrap wheel
      shell: |
        rm dist/*
        python3 setup.py sdist bdist_wheel
      args:
        chdir: "{{source_path}}"

    - name: Determine wheel filename
      shell: ls dist | egrep "occystrap.*\.whl"
      args:
        chdir: "{{source_path}}"
      register: occystrap_wheel_file_complex

    - name: Extract the wheel filename
      set_fact:
        occystrap_wheel_file: "{{occystrap_wheel_file_complex.stdout}}"

    - debug:
        msg: "Occystrap wheel file: {{occystrap_wheel_file}}"

    - name: Wait for all instances to present an "OpenSSH" prompt
      wait_for:
        port: 22
        host: "{{hostvars[item]['ansible_ssh_host']}}"
        search_regex: OpenSSH
        delay: 10
      with_items: "{{ groups['occystrapall'] }}"

- hosts: primary
  gather_facts: yes
  become: true
  vars:
    source_path: "/home/jenkins/src/occystrap/"

  tasks:
    - name: Use CI package cache to speed things up
      copy:
        content: |
          Acquire::http::Proxy "http://192.168.1.50:8000";
        dest: /etc/apt/apt.conf.d/00proxy
        owner: root
        group: root
        mode: u=r,g=r,o=r

    - name: Install minimum dependencies
      apt:
        name:
          - git
          - python3
          - python3-dev
          - python3-pip
          - python3-wheel
          - apparmor
          - docker.io
          - runc
        state: latest

    - name: Restart apparmor
      service:
        name: apparmor
        enabled: yes
        state: restarted

    - name: Copy occystrap wheel file
      copy:
        src: "{{source_path}}/dist/{{hostvars['localhost']['occystrap_wheel_file']}}"
        dest: "/root/{{hostvars['localhost']['occystrap_wheel_file']}}"

    - name: Install Occystrap
      shell: pip3 install "/root/{{hostvars['localhost']['occystrap_wheel_file']}}"

    - name: Run a local docker registry for us to talk to
      shell: docker run -d -p 5000:5000 --restart=always --name registry registry:2

    - name: Make a /srv/occystrap directory
      file:
        path: /srv/occystrap
        state: directory
        owner: "{{base_image_user}}"
        group: "{{base_image_user}}"

- hosts: primary
  gather_facts: yes
  become: no
  vars:
    source_path: "/home/jenkins/src/occystrap/"

  tasks:
    - name: Copy occystrap CI tests and data as the default user
      synchronize:
        src: "{{source_path}}"
        dest: "/srv/occystrap/"
        use_ssh_args: yes
        recursive: yes

- hosts: primary
  gather_facts: yes
  become: true
  vars:
    source_path: "/home/jenkins/src/occystrap/"

  tasks:
    - name: Populate the registry with test images
      shell: |
        cd {{item}}
        docker build -t localhost:5000/occystrap_{{item}}:latest .
        docker push localhost:5000/occystrap_{{item}}:latest
      args:
        chdir: /srv/occystrap/deploy/occystrap_ci/testdata
      with_items:
        - deletion_layers

    - name: Replace a localhost entry with our own
      lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.0\.1'
        line: 127.0.0.1 localhost primary
        owner: root
        group: root
        mode: "0644"
